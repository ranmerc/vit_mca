Follow the steps below to solve the problem:

    Create a set sptSet (shortest path tree set) that keeps track of vertices included in the shortest-path tree, i.e., whose minimum distance from the source is calculated and finalized. Initially, this set is empty. 
    Assign a distance value to all vertices in the input graph. Initialize all distance values as INFINITE. Assign the distance value as 0 for the source vertex so that it is picked first. 
    While sptSet doesnâ€™t include all vertices 
        Pick a vertex u which is not there in sptSet and has a minimum distance value. 
        Include u to sptSet. 
        Then update distance value of all adjacent vertices of u. 
            To update the distance values, iterate through all adjacent vertices. 
            For every adjacent vertex v, if the sum of the distance value of u (from source) and weight of edge u-v, is less than the distance value of v, then update the distance value of v. 

function dijkstra(G, S)
    for each vertex V in G
        distance[V] <- infinite
        previous[V] <- NULL
        If V != S, add V to Priority Queue Q
    distance[S] <- 0
	
    while Q IS NOT EMPTY
        U <- Extract MIN from Q
        for each unvisited neighbour V of U
            tempDistance <- distance[U] + edge_weight(U, V)
            if tempDistance < distance[V]
                distance[V] <- tempDistance
                previous[V] <- U
    return distance[], previous[]

void Graph::dijkstra(Vertex s){
Vertex v,w;
Initialize s.dist = 0 and set dist of all other
vertices to infinity
while (there exist unknown vertices, find the
one b with the smallest distance)
b.known = true;
}
for each a adjacent to b
if (!a.known)
if (b.dist + Cost_ba < a.dist){
decrease(a.dist to= b.dist + Cost_ba);
a.path = b;
}
}
}