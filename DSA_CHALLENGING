1.
#include <iostream>
#define m 3
#define n m*3

using namespace std;

int stack[n];
int t[3] = {-1,m-1,2*m-1};
int limits[3] = {m,2*m,3*m};
int start[3] = {0,m,2*m};


void push(int sno, int val) {
	if(t[sno] >= limits[sno]-1)
		cout<<"Stack Overflow"<<endl;
	else {
		t[sno]++;
		stack[t[sno]]=val;
	}
}

void pop(int sno) {
	if(t[sno] < start[sno])
		cout<<"Stack Underflow"<<endl;
	else {
		cout<<"The popped element is "<< stack[t[sno]] <<endl;
		stack[t[sno]] = 0;
		t[sno]--;
	}
}

void display() {
		cout<<"Stack elements are:";
		for(int i=n-1; i>=0; i--)
			cout<<stack[i]<<" ";
		cout<<endl;
}

int main() {
	int ch, val,sno;
	cout<<"1) Push in stack"<<endl;
	cout<<"2) Pop from stack"<<endl;
	cout<<"3) Display stack"<<endl;
	cout<<"4) Exit"<<endl;
	do {
		cout<<"Enter choice: "<<endl;
		cin>>ch;
		switch(ch) {
			case 1: {
				cout<<"Enter value to be pushed:"<<endl;
				cin>>val;
				cout<<"Enter stack no:"<<endl;
				cin>>sno;
				if(sno > n/m){
					printf("Invalid stack number\n");
					break;
				}
				push(sno-1,val);
				break;
			}
			case 2: {
				cout<<"Enter stack no:"<<endl;
				cin>>sno;
				if(sno > n/m){
					printf("Invalid stack number\n");
					break;
				}
				pop(sno-1);
				break;
			}
			case 3: {
				display();
				break;
			}
			case 4: {
				cout<<"Exit"<<endl;
				break;
			}
			default: {
				cout<<"Invalid Choice"<<endl;
			}
		}
	}while(ch!=4);
	return 0;
}


2.
#include<iostream>
#include<string>
#include<vector>
using namespace std;

vector<string>st;
int top = -1;

void push(string reg){
	top++;
	st.push_back(reg);
}

void pop(){
	--top;
}

string peek(){
	return st[top];
}

int main(){
	int ch = 1;
	string reg;
	while(ch){
		cout<<"Enter registration number : "<<endl;
		cin>>reg;
		push(reg);
		cout<<"Enter 1 to add registration number and 0 to quit"<<endl;
		cin>>ch;
	}

	cout<<"Total entries : "<<top<<endl;

	while(top > 9)pop();

	cout<<"First ten registration numbers to submit the assignment : "<<endl;
	while(top >= 0){
		cout<<peek()<<endl;
		pop();
	}

	return 0;
}

3.
#include<iostream>
#include<string>
#include<vector>

using namespace std;


string curr_web;

vector<string>stF;
int topF = -1;
vector<string>stB;
int topB = -1;
int curr = 0;

void movenext(){
	if(topF == curr-1){
	cout<<"Currently, no webpages ahead."<<endl;
	cout<<"Enter the name of the webpage you're searching for : "<<endl;
	cin>>curr_web;
	topB++;
	stB.push_back(curr_web);
	}
}

int main(){
	int ch;
	while(1){
	cout<<"Enter 1 to display forward and backward stack.\nEnter 2 to move to next webpage"<<endl;
	cout<<"Enter 3 to move to previous page\nEnter 4 to quit"<<endl;
	cin>>ch;
	switch(ch){
		case 1 : display();break;
		case 2 : movenext();break;
		case 3 : moveprevious();break;
		case 4 : return 0;
		default : cout<<"Wrong choice !"<<endl; break;
	}
	}

	return 0;
}

4.
A.
#include <iostream>
#include <stack>
#include <locale> 
using namespace std;
int preced(char ch)
{
	if (ch == '+' || ch == '-')
	{
		return 1;
	}
	else if (ch == '*' || ch == '/')
	{
		return 2;
	}
	else if (ch == '^')
	{
		return 3;
	}
	else
	{
		return 0;
	}
}
string inToPost(string infix)
{
	stack<char> stk;
	stk.push('#');		
	string postfix = ""; 

	string::iterator it;
	for (it = infix.begin(); it != infix.end(); it++)
	{
		if (isalnum(char(*it)))
			postfix += *it; 
		else if (*it == '(')
			stk.push('(');
		else if (*it == '^')
			stk.push('^');
		else if (*it == ')')
		{
			while (stk.top() != '#' && stk.top() != '(')
			{
				postfix += stk.top(); 
				stk.pop();
			}
			stk.pop(); 
		}
		else
		{
			if (preced(*it) > preced(stk.top()))
				stk.push(*it); 
			else
			{
				while (stk.top() != '#' && preced(*it) <= preced(stk.top()))
				{
					postfix += stk.top();
					stk.pop();
				}
				stk.push(*it);
			}
		}
	}
	while (stk.top() != '#')
	{
		postfix += stk.top();
		stk.pop();
	}
	return postfix;
}
int main()
{
	string infix;
	cout<<"Enter infix expression : "<<endl;
	cin>>infix;
	cout << "Postfix Form Is: " << inToPost(infix) << endl;
}

4.B.
#include <iostream>
#include <stack>
#include <locale> 
#include <algorithm>
using namespace std;
int preced(char ch)
{
	if (ch == '+' || ch == '-')
	{
		return 1; 
	}
	else if (ch == '*' || ch == '/')
	{
		return 2; 
	}
	else if (ch == '^')
	{
		return 3;
	}
	else
	{
		return 0;
	}
}
string inToPost(string infix)
{
	stack<char> stk;
	stk.push('#');		 
	string postfix = ""; 

	string::iterator it;
	for (it = infix.begin(); it != infix.end(); it++)
	{
		if (isalnum(char(*it)))
			postfix += *it; 
		else if (*it == '(')
			stk.push('(');
		else if (*it == '^')
			stk.push('^');
		else if (*it == ')')
		{
			while (stk.top() != '#' && stk.top() != '(')
			{
				postfix += stk.top(); 
				stk.pop();
			}
			stk.pop(); 
		}
		else
		{
			if (preced(*it) > preced(stk.top()))
				stk.push(*it); 
			else
			{
				while (stk.top() != '#' && preced(*it) <= preced(stk.top()))
				{
					postfix += stk.top(); 
					stk.pop();
				}
				stk.push(*it);
			}
		}
	}
	while (stk.top() != '#')
	{
		postfix += stk.top(); 
		stk.pop();
	}
	return postfix;
}
string inToPre(string infix)
{
	string prefix;
	reverse(infix.begin(), infix.end()); 
	string::iterator it;
	for (it = infix.begin(); it != infix.end(); it++)
	{ 
		if (*it == '(')
			*it = ')';
		else if (*it == ')')
			*it = '(';
	}
	prefix = inToPost(infix);			  
	reverse(prefix.begin(), prefix.end()); 
	return prefix;
}
int main()
{
	string infix;
	cout<<"Enter infix expression : "<<endl;
	cin>>infix;
	cout << "Prefix Form Is: " << inToPre(infix) << endl;
}

5.
#include<iostream>
#define N 5

using namespace std;

int queue[N];
int front = -1;
int rear = -1;

void insert(){
	++rear;
	if(rear >= N){
		cout<<"Cannot add a member. Limit reached."<<endl;
		return;
	}
	if(front == -1) front = 0;
	queue[rear] = 1;
	cout<<"New member added"<<endl;
}

void takeseat(){
	while(--rear > -1){
		cout<<"Member "<<front+1<<" taken seat."<<endl;
		front++;
	}
	cout<<"Ride Started !\n";
	front = -1;
	rear = -1;
}


int main(){	
	int ch;
	while(1){
		cout<<"\nPress 1 to add a member\nPress 2 to start the ride\nPress 3 to Quit."<<endl;
		cin>>ch;
		if(ch == 2 && rear < N) cout<<"Ride cannot start without "<<N<<" members.\nCurrently, "<<rear+1<<" member/s. Add more members."<<endl;
		else if(ch == 1)
			insert();
		else if(ch == 3) return 0;
		else takeseat();
	}
	return 0;
}
